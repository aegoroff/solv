
use crate::ast::{Expr};
use crate::lex::{Tok, LexicalError};

grammar<'a>(input: &'a str);

pub Solution = <FirstLine> <Line*>;

Line = {
    <HeaderLine>,
    <Project>,
    <Global>,
};

HeaderLine = {
    <Comment>,
    <Version>,
};

FirstLine : Expr<'a> = <id1:Identifier> <id2:Identifier*> "comma" <id3:Identifier*> <v:DigitOrDot> => Expr::FirstLine(Box::new(v));

Version : Expr<'a> = <id:Identifier> "eq" <r:DigitOrDot> => Expr::Version(Box::new(id),Box::new(r));

Project : Expr<'a> = <b:ProjectBegin> <s:Section*> "close_element" => Expr::Project(Box::new(b), s);

Global : Expr<'a> = <id:Identifier> <s:Section*> "close_element" => Expr::Global(s);

ProjectBegin : Expr<'a> = {
    "open_element" <t:Guid> "eq" <n:Str> "comma" <p:Str> "comma" <id:Guid> => {
        Expr::ProjectBegin(Box::new(t),Box::new(n),Box::new(p),Box::new(id))
    },
};

Section : Expr<'a> = <b:SectionBegin> <c:SectionContent*> "close_element" => Expr::Section(Box::new(b), c);

SectionBegin : Expr<'a> = {
    "open_element" <name:Identifier+> "eq" <stage:Identifier> => {
        Expr::SectionBegin(name, Box::new(stage))
    },
};

SectionContent : Expr<'a> = {
    <k:SectionKey> <v:SectionValue> => {
        Expr::SectionContent(Box::new(k), Box::new(v))
    },
};

Comment : Expr<'a> = "comment" => Expr::Comment(<>);

DigitOrDot: Expr<'a> = "digit_and_dot" => Expr::DigitOrDot(<>);

Guid: Expr<'a> = "guid" => Expr::Guid(<>);

Identifier: Expr<'a> = "id" => Expr::Identifier(<>);

Str: Expr<'a> = "str" => Expr::Str(<>);

SectionKey: Expr<'a> = "section_key" => Expr::Str(<>);

SectionValue: Expr<'a> = "section_value" => Expr::Str(<>);

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Tok<'a> {
        "comment" => Tok::Comment(<&'a str>),
        "str" => Tok::Str(<&'a str>),
        "section_key" => Tok::SectionKey(<&'a str>),
        "section_value" => Tok::SectionValue(<&'a str>),
        "guid" => Tok::Guid(<&'a str>),
        "id" => Tok::Id(<&'a str>),
        "digit_and_dot" => Tok::DigitsAndDots(<&'a str>),
        "comma" => Tok::Comma,
        "eq" => Tok::Eq,
        "open_element" => Tok::OpenElement(<&'a str>),
        "close_element" => Tok::CloseElement(<&'a str>),
    }
}
